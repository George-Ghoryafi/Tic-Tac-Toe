public class TicTacToeGame {
	/**
	 * The board of the game, stored as a one dimension array.
	 */
	private CellValue[] board;

	/**
	 * level records the number of rounds that have been played so far.
	 */
	private int level;

	/**
	 * gameState records the current state of the game
	 */
	private GameState gameState;

	/**
	 * lines is the number of lines in the grid
	 */
	private int lines;

	/**
	 * columns is the number of columns in the grid
	 */
	private int columns;

	/**
	 * sizeWin is the number of cell of the same type that must be aligned to win
	 * the game
	 */
	private int sizeWin;

	/**
	 * default constructor, for a game of 3x3, which must align 3 cells
	 */
	public TicTacToeGame(){
		lines = 3;
		columns = 3;
		level = 0;
		sizeWin = 3;
		board = new CellValue[9];

		for(int i = 0; i<board.length; i++){
			board[i] = CellValue.EMPTY;
		}

		gameState = GameState.PLAYING;

	}

	/**
	 * constructor allowing to specify the number of lines and the number of columns
	 * for the game. 3 cells must be aligned.
	 * 
	 * @param lines   the number of lines in the game
	 * @param columns the number of columns in the game
	 */
	public TicTacToeGame(int lines, int columns){
		this.lines = lines;
		this.columns = columns;
		level = 0;
		sizeWin = 3;
		board = new CellValue[(lines*columns)];

		for(int i = 0; i<board.length; i++){
			board[i] = CellValue.EMPTY;
		}

		gameState = GameState.PLAYING;
	}

	/**
	 * constructor allowing to specify the number of lines and the number of columns
	 * for the game, as well as the number of cells that must be aligned to win.
	 * 
	 * @param lines   the number of lines in the game
	 * @param columns the number of columns in the game
	 * @param sizeWin the number of cells that must be aligned to win.
	 */
	public TicTacToeGame(int lines, int columns, int sizeWin){
		this.lines = lines;
		this.columns = columns;
		level = 0;
		this.sizeWin = sizeWin;
		board = new CellValue[(lines*columns)];
		
		for(int i = 0; i<board.length; i++){
			board[i] = CellValue.EMPTY;
		}


		gameState = GameState.PLAYING;
	}


	public int getLen(){
		return board.length;
	}

	public CellValue getCellVal(int i){
		return board[i-1];
	}
	/**
	 * getter for the variable lines
	 * 
	 * @return the value of lines
	 */
	public int getLines() {
		return lines;
	}

	/**
	 * getter for the variable columns
	 * 
	 * @return the value of columns
	 */
	public int getColumns(){
		return columns;
	}

   /**
	* getter for the variable level
	* @return
	* 	the value of level
	*/
	public int getLevel(){
		return level;
	}

	/**
	 * getter for the variable sizeWin
	 * 
	 * @return the value of sizeWin
	 */
	public GameState getGameState(){
		return gameState;
	}

   /**
	* getter for the variable sizeWin
	* @return
	* 	the value of sizeWin
	*/
	public int getSizeWin(){
		return sizeWin;
	}


	/**
	 * returns the cellValue that is expected next, in other word, which player (X
	 * or O) should play next. This method does not modify the state of the game.
	 * 
	 * @return the value of the enum CellValue corresponding to the next expected
	 *         value.
	 */
	public CellValue nextCellValue(){ //complete
		int X_count = 0;
		int O_count = 0; 

		for(int i = 0; i<board.length; i++){ 
			if(board[i] == CellValue.X){
				X_count = X_count + 1; //counts how many X's are in play
			}else if(board[i] == CellValue.O){
				O_count = O_count + 1; //counts how many O's are in play
			}
		}

		//if more X's than O's, O turn. If X and O are equal, X turn. If more O's than X, call the draw and make it O's turn
		if(X_count > O_count){
			return CellValue.O;
		}else if(X_count == O_count){
			return CellValue.X;
		}else {
			gameState = GameState.DRAW;
			return CellValue.O;
		}
	}


	/**
	 * returns the value of the cell at index i. If the index is invalid, an error
	 * message is printed out. The behavior is then unspecified
	 * 
	 * @param i the index of the cell in the array board
	 * @return the value at index i in the variable board.
	 */
	public CellValue valueAt(int i) { //complete
		return board[i-1];
	}

   /**
	* This method is called by the next player to play at the cell  at index i.
	* If the index is invalid, an error message is printed out. The behaviour is then unspecified
	* If the chosen cell is not empty, an error message is printed out. The behaviour is then unspecified
	* If the move is valide, the board is updated, as well as the state of the game.
	* To faciliate testing, it is acceptable to keep playing after a game is already won. 
	* If that is the case, the a message should be printed out and the move recorded. 
	* The winner of the game is the player who won first
   	* @param i
    *  the index of the cell in the array board that has been selected by the next player
  	*/
	  public void play(int i) { //complete
		if(board[i-1] == CellValue.EMPTY){
			board[i-1] = nextCellValue();  
		}else{
			System.out.println("Invalid Position");
		}
		setGameState(i);
		getGameState();


	}


   /**
	* A helper method which updates the gameState variable
	* correctly after the cell at index i was just set.
	* The method assumes that prior to setting the cell
	* at index i, the gameState variable was correctly set.
	* it also assumes that it is only called if the game was
	* not already finished when the cell at index i was played
	* (the the game was playing). Therefore, it only needs to
	* check if playing at index i has concluded the game
	****************************** 
	*So check if the required number of sizeWin cells are formed to win.
	******************************
    *  the index of the cell in the array board that has just
    * been set
  	*/

	  private void setGameState(int index){ 
		int X_count = 0;
		int O_count = 0; 
		int EM_count = 9; 



		CellValue[][] twice = new CellValue[lines][columns];
		//turns board into a two dimensional array 
		for(int i = 0; i<lines; i++){
			for(int j = 0; j<columns; j++){
				twice[i][j] = board[(i*lines) + j]; //first sub element of each element will make up the first row
			}
		}

		for(int i = 0; i<board.length; i++){ 
			if(board[i] == CellValue.X){
				X_count = X_count + 1; //counts how many X's are in play
			}else if(board[i] == CellValue.O){
				O_count = O_count + 1; //counts how many O's are in play
			}else{
				EM_count = EM_count - 1;
			}
		}

		if(X_count > 2 || O_count > 2){
			for(int i = 0; i<lines; i++){
				for(int j = 0; j<columns; j++){
					checkWinner1(i,j,true, twice); //row
					checkWinner1(i,j,false, twice); //colunns
					checkWinner2(i,j,true, twice); //main diag
					checkWinner2(i,j,false, twice); //second diag
				}
			}

		if(!(gameState == GameState.XWIN || gameState == GameState.OWIN)){
			gameState = GameState.DRAW;
		}
		
	}


	}


	void checkWinner1(int row, int col, boolean isRow, CellValue[][] twice){
		boolean winner = false;

		if(isRow){
			if(col+2<columns && twice[row][col]==twice[row][col+1] && twice[row][col]==twice[row][col+2]){
				winner = true;
			}
			else{
				if(row+2<lines && twice[row][col] == twice[row+1][col] && twice[row][col] == twice[row+2][col]){
					winner = true;
				}
			}

			if(winner){
				if(board[row*columns+col] == CellValue.X){
					gameState = GameState.XWIN;
				}
				if(board[row*columns+col] == CellValue.O){
					gameState = GameState.OWIN;
				}
			}
	
	}
	
}
	void checkWinner2(int row, int col, boolean isMain, CellValue[][] twice){
		boolean winner = false;
		if(isMain){
			if(col+2<columns && row+2<lines && twice[row][col] == twice[row+1][col+1] && twice[row][col] == twice[row+2][col+2]){
				winner = true;
			}
			else{
				if(col-2>=0 && row+2<lines && twice[row][col] == twice[row+1][col-1] && twice[row][col] == twice[row+2][col-2]){
					winner = true;
				}
			}
			if(winner){
				if(board[row*columns+col] == CellValue.X){
					gameState = GameState.XWIN;
				}
				if(board[row*columns+col] == CellValue.O){
					gameState = GameState.OWIN;
				}
			}
			
		}


}





	final String NEW_LINE = System.getProperty("line.separator");
	// returns the OS dependent line separator

   /**
	* Returns a String representation of the game matching
	* the example provided in the assignment's description
	*
   	* @return
    *  String representation of the game
  	*/

	  public String toString(){
		String l1 = (board[0].name() + "  |  " + board[1].name() + "  |  " + board[2].name()); 
		String l2 = (board[3].name() + "  |  " + board[4].name() + "  |  " + board[5].name());
		String l3 = (board[6].name() + "  |  " + board[7].name() + "  |  " + board[8].name());
		String separator = "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ";
		
		return (l1 + NEW_LINE + separator + NEW_LINE + l2 + NEW_LINE + separator + NEW_LINE + l3);
	}
}
